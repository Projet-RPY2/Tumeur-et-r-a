# Predicteur passage en réanimation et durée de séjour chez patients atteints par cancer / tumeur

# 1. Création d'un dataset avec seuleument les chirurgies tumorales
# 2. Analayse basique du nouveau dataset divisé en deux groupes (Rea 1 / Réa 0) avec : médiane, écart type pour chaque variable. 
# 3. Chercher les variables d'intérêts (sur les 130) en réalisant des test de Wilcoxon/ Fisher. 
# 4. Réaliser une régression logistique en univariée sur uniquement les variables d'intérêt qui seront sorties en amont. 
# 5. Bonus (si on est vraiment très forts) : Régression en multivariée. 

--------------------------------------------
# Chargement des librairies

install.packages("dplyr") # pour manipulation des données
library(dplyr)

install.packages("tidyr") # pour ordonner, ranger les données
library(tidyr)
install.packages("stringr")
library(stringr)

install.packages("ggplot2") # pour représentations graphiques
library(ggplot2)

install.packages("questionr") #pour odds-ratio
library(questionr)

library(MASS) # pour statistiques

# Définition des chemins d'accès

path_import = "/Users/karimbelarbi/Google_Drive/M1_Data_Science_en_Santé/Djamel Zitouni/Projet rpy2"

# Chargement du jeu de données

data_raw = read.csv2(file.path(path_import, "export_data_1.csv"), dec = ",", header = TRUE, encoding = "latin1", sep = ";")
?read.csv2

# Création d'une copie du fichier sur lesquel travailler
data = data_raw

# Première exploration des données
head(data)
str(data) # 299466 obs. of  130 variables # il faudrait pouvoir compter le nb de variables int et num.

# noms de colonnes en minuscules
colnames(data) = tolower(colnames(data))
colnames(data)

!any(duplicated(data$id_intervention)) # TRUE donc tous les id_intervention sont uniques (peut servir comme clef primaire)
!any(duplicated(data$id_patient)) # FALSE donc un patient peut avoir plusieurs enregistrement

summary(as.factor(data$lib_diagnostic)) # permet de voir le nombre d'enregistrement correspondant à chaque diagnostique. Peut aider à choisir changer de pathologie pour le sujet si necessaire.

# ajout d'une variable == 1 pour cancer ou tumeur ou == 0 sinon
unique(data$lib_diagnostic[grepl("Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome", data$lib_diagnostic)]) # 679 lib_diagnostic correspondant. 


for(i in 1:nrow(data)) {
  data$cancer[i] = as.integer(grepl("Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome", data$lib_diagnostic[i]))
}

#correction des valeurs abberantes
#valeurs seuil a rajouter 
data = data%>%
  filter (data$duree_intervention>=0, 
          data$duree_bloc>=0, 
          data$duree_anesthesie>=0, 
          data$duree_induction_incision>=0, 
          data$duree_sejour_interv>=0, 
          data$delai_entree_interv>=0, 
          data$duree_rea_post_op>=0)

filter(data$duree_intervention<=0, 
       data$duree_bloc<=0, 
       data$duree_anesthesie<=0, 
       data$duree_induction_incision<=0, 
       data$duree_sejour_interv<=0, 
       data$delai_entree_interv<=0, 
       data$duree_rea_post_op<=0)

# imc < 15 ??
#categorie_imc_adulte a corriger 





data_cancer = data %>%
  filter(str_detect(data$lib_diagnostic, "Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome"))
summary(data_cancer)


# Caractérisation des échantillons obtenus
## nombre d'enregistrements et nombre de patients uniques associé à cancer/tumeur
nrow(data_cancer) #  32,232 enregistrement     
length(data_cancer$id_intervention) # idem
length(unique(data_cancer$id_patient)) # 23428 patientes uniques dans ces enregistrements 

summary(data) # stats sur population
summary(data_cancer) # stats sur échantillons associés à cancer/tumeur

# création d'une base de données ne contenant que les enregistrements et variables d'intérêt pour la suite de l'étude
# data_aomi = data[data$aomi == 1,]

data_cancer1 = data_cancer%>%
  dplyr::select (id_intervention, id_patient, age, poids, categorie_age_adulte, delai_entree_interv, imc, categorie_imc_adulte, asa, 
                 categorie_asa, urgence, sexe, duree_intervention, duree_bloc, duree_anesthesie,rea_si_post_op,duree_induction_incision, 
                 lib_diagnostic, duree_sejour_interv, deces_sejour_interv, duree_rea_post_op, moy_pnim_bloc_induc, 
                 moy_pnim_anesth, dobutamine, ephedrine, noradrenaline, moy_vce_chir_poids_ideal,phenylephrine, total_remplissage, entree_urgences)

summary(data_cancer1)

##  ajout de variables dans la base data_cancer
## ajout d'une variable == 1 pour usage catécholamine
for(i in 1:nrow(data_cancer1)) {
  data_cancer1$catecholamine[i] = as.integer(data_cancer$dobutamine[i] == 1 |data_cancer$ephedrine[i] == 1 | data_cancer$noradrenaline[i] == 1 | data_cancer$phenylephrine[i] == 1)
}


# correction du type de variable (à priori important pour regression logistique)
# Faut-il transformer poids, age, duree_rea_post_op en numrique  (plutôt que int) ?
# correction du type de variable # Je ne sais pas si c'est ce qu'il faut pour la suite
data_cancer1 %>%
  dplyr::mutate(
    id_intervention = as.character(id_intervention),
    id_patient = as.character(id_patient),
    categorie_age_adulte = as.factor(categorie_age_adulte),
    sexe = as.factor(sexe),
    categorie_imc_adulte = as.factor(categorie_imc_adulte),
    asa = as.factor(asa),
    urgence = as.factor(urgence),
    sexe = as.factor(sexe),
    lib_diagnostic = as.factor(lib_diagnostic),
    entree_urgences = as.factor(entree_urgences),
    rea_si_post_op = as.factor(rea_si_post_op),
    dobutamine = as.factor(dobutamine),
    ephedrine = as.factor(ephedrine),
    noradrenaline = as.factor(noradrenaline),
    phenylephrine = as.factor(phenylephrine),
    catecholamine = as.factor(catecholamine))

## Caractérisation / représentation graphique pour représenter notre échantillon

summary(data_cancer1)

ggplot(data_cancer1, aes(y = age)) +
  geom_boxplot()

ggplot(data_cancer1, aes(y = poids)) +
  geom_boxplot()

ggplot(data_cancer1, aes(y = imc)) +
  geom_boxplot()
# Recherche de facteurs associés à réanimation ou durée de séjour de séjour plus longue dans cancer

## Test de variables qualitatives associés à rea_post_op

ggplot (data_cancer1, aes(x = sexe, fill = rea_si_post_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$sexe, data_cancer1$rea_si_post_op) # Bon test ??
chisq.test(tbl)

ggplot (data_cancer1, aes(x = categorie_age_adulte, fill = rea_si_post_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$categorie_age_adulte, data_cancer1$rea_si_post_op) # Bon test ??
chisq.test(tbl)

ggplot (data_cancer1, aes(x = categorie_imc_adulte, fill = rea_si_post_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$categorie_imc_adulte, data_cancer1$rea_si_post_op)
chisq.test(tbl)

ggplot (data_cancer1, aes(x = asa, fill = rea_post_si_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$asa, data_cancer1$rea_si_post_op)
chisq.test(tbl)


## Test correlation entre variables qualitatives et duree_sejour_interv

ggplot(data_cancer1, aes(x = age, y = duree_sejour_interv)) +
  geom_point()
cor.test(data_cancer1$age, data_cancer1$duree_bloc, method = "spearman", alternative= "less")

ggplot(data_cancer1, aes(x = imc, y = duree_sejour_interv)) +
  geom_point()
cor.test(data_cancer1$age, data_cancer1$duree_sejour_interv, method = "spearman", alternative= "less")




#Regression logistique (seulement pour predire mais pas pour expliquer le lien entre les variables => test chi2)
#on supprime les lignes avec des NA 

sum(is.na(data_cancer1$rea_si_post_op))
sum(is.na(data_cancer1$imc))
sum(is.na(data_cancer1$sexe))

data_cancer_na = data_cancer1%>%
  na.omit()

table(data_cancer_na$rea_post_op) # Nombre de patients avec et sans rea_post_op dans l'échantillon data_cancer_na

#creation du modele 
library(MASS)
modele1 = glm(formula=data_cancer_na$rea_si_post_op ~ data_cancer_na$age + 
                data_cancer_na$imc + data_cancer_na$asa+ data_cancer_na$sexe+ data_cancer_na$urgence+ 
                data_cancer_na$delai_entree_interv+data_cancer_na$categorie_imc_adulte, family = "binomial", na.action = na.omit)
?family.glm
summary(model1)
#AIC = 59940
modele1$formula
modele2 = step(modele1)
summary(modele2)
#AIC = 3774.4

# step() choisi : age, scoreasa, urgence1, duree_bloc, total_remplissage, dobutamine1, ephedrine1, nora ...
library("questionr")
odds.ratio(modele2)

#scoreasa, urgence, dobutamine, noradrenaline >>> 1 : facteur de risque d'entrée en réa_post_op 
#sexeM < 1 : facteur de protection ??? (pas sûr)
#duree_bloc, age, total_remplissage ~= 1 : pas d'impact sur l'entrée en réa 

#forestplot 
library(broom)
graphfor <- tidy(modele2, conf.int = TRUE, exponentiate = TRUE)
str(graphfor)
library(ggplot2)
ggplot(graphfor) +
  aes(x = estimate, y = term, xmin = conf.low, xmax = conf.high) +
  geom_vline(xintercept = 1) +
  geom_errorbarh() +
  geom_point() +
  scale_x_log10()

####################
pi_hat = predict(modele2, newdata = data_cancer_na,
             type = "response")

boxplot(pi~data_cancer_na$rea_post_op, y)
summary(data_cancer_na$sexe)
summary(data_cancer_na$rea_post_op)
#  F     M 
#8211 12640
length(data_cancer_na$rea_post_op)
length(y)
summary(data_cancer_na$asa)     #supprimer asa 4 et 5?
# ASA1  ASA2  ASA3  ASA4  ASA5 
# 4029 11044  5480   293     5 
