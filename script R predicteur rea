# Predicteur passage en réanimation et durée de séjour chez patients atteints par cancer / tumeur

# 1. Création d'un dataset avec seuleument les chirurgies tumorales
# 2. Analayse basique du nouveau dataset divisé en deux groupes (Rea 1 / Réa 0) avec : médiane, écart type pour chaque variable. 
# 3. Chercher les variables d'intérêts (sur les 130) en réalisant des test de Wilcoxon/ Fisher. 
# 4. Réaliser une régression logistique en univariée sur uniquement les variables d'intérêt qui seront sorties en amont. 
# 5. Bonus (si on est vraiment très forts) : Régression en multivariée. 

--------------------------------------------
# Chargement des librairies

install.packages("dplyr") # pour manipulation des données
library(dplyr)

install.packages("tidyr") # pour ordonner, ranger les données
library(tidyr)
install.packages("stringr")
library(stringr)

install.packages("ggplot2") # pour représentations graphiques
library(ggplot2)

install.packages("questionr") #pour odds-ratio
library(questionr)

library(MASS) # pour statistiques

---------------------------
## Définition des chemins d'accès

path_import = "/Users/karimbelarbi/Google_Drive/M1_Data_Science_en_Santé/Djamel Zitouni/Projet rpy2"

# Chargement du jeu de données

data_raw = read.csv2(file.path(path_import, "export_data_1.csv"), dec = ",", header = TRUE, encoding = "latin1", sep = ";")
?read.csv2

# Création d'une copie du fichier sur lesquel travailler
data = data_raw

--------------------------
## Première exploration des données
head(data)
str(data) # 299466 obs. of  130 variables # il faudrait pouvoir compter le nb de variables int et num.
summary(data) # stats sur population

# noms de colonnes en minuscules
colnames(data) = tolower(colnames(data))
colnames(data)

!any(duplicated(data$id_intervention)) # TRUE donc tous les id_intervention sont uniques (peut servir comme clef primaire)
!any(duplicated(data$id_patient)) # FALSE donc un patient peut avoir plusieurs enregistrement

summary(as.factor(data$lib_diagnostic)) # permet de voir le nombre d'enregistrement correspondant à chaque diagnostique. Peut aider à choisir changer de pathologie pour le sujet si necessaire.

unique(data$lib_diagnostic[grepl("Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome", data$lib_diagnostic)]) # 679 lib_diagnostic correspondant. 

-------
## Sélection des lignes d'intérêt : population opérée d'une chirurgie carcinologique :
unique(data$lib_diagnostic[grepl("Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome", data$lib_diagnostic)]) # 679 diagnostics de chirurgie carcinologique
unique(data$lib_diagnostic[grepl("Tumeur maligne", data$lib_diagnostic)]) # 316 diagnostics de tumeurs malignes

data_cancer = data %>%
  filter(str_detect(data$lib_diagnostic, "Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome"))
summary(data_cancer)

# Caractérisation des échantillons obtenus
nrow(data_cancer) #  32,232 enregistrement     
length(data_cancer$id_intervention) # idem
length(unique(data_cancer$id_patient)) # 23428 patientes uniques dans ces enregistrements 

summary(data_cancer) # stats sur échantillons associés à cancer/tumeur

# Option annexe, création d'une nouvelle colonne cancer : 
for(i in 1:nrow(data)) {
  data$cancer[i] = as.integer(grepl("Cancer|cancer|Tumeur|tumeur|carcinome|Carcinome", data$lib_diagnostic[i]))
}
-------
## Sélection des variables d'intérêt et création du dataframe de l'étude = data_cancer1 : 
data_cancer1 = data_cancer%>%
  dplyr::select (id_intervention, id_patient, rea_si_post_op, lib_diagnostic, age, categorie_age_adulte, poids, imc, categorie_imc_adulte, delai_entree_interv, asa, 
                 categorie_asa, urgence, entree_urgences, sexe, duree_intervention, duree_bloc, duree_anesthesie, duree_induction_incision, duree_sejour_interv, duree_rea_post_op, deces_sejour_interv, moy_pnim_bloc_induc, 
                 moy_pnim_anesth, dobutamine, ephedrine, noradrenaline, phenylephrine, moy_vce_chir_poids_ideal, total_remplissage)

summary(data_cancer1)
------
## Nettoyage de la base de donnée : 
  #correction des valeurs abberantes

data_cancer1 = data_cancer1%>%
  filter (data_cancer1$poids>=0 & data_cancer1$poids<=250, 
          data_cancer1$imc >= 5 & data_cancer1$imc <= 75, 
          data_cancer1$delai_entree_interv >=0 & data_cancer1$delai_entree_interv<=60, # le délai a été mis à deux mois de manière complètement aléatoire
          data_cancer1$duree_intervention >= 15 & data_cancer1$duree_intervention <= 1440, # une intervention dure moins de 24h
          data_cancer1$duree_bloc >= 15 & data_cancer1$duree_bloc <= 1440,
          data_cancer1$duree_anesthesie>=0 & data_cancer1$duree_anesthesie <= 1440,
          data_cancer1$duree_induction_incision >= 0,
          data_cancer1$moy_vce_chir_poids_ideal>=0) #0 est une valeur plausible en cas d'ALR 

# Au total : 11403 lignes et 30 variables. 

## Ajout de variables dans la base data_cancer
# ajout d'une variable == 1 pour usage catécholamine
data_cancer1 <- data_cancer1 %>%
  mutate(catecholamine = ifelse(((dobutamine == 0) & (ephedrine == 0) & (noradrenaline == 0) & (phenylephrine == 0)), 0, 1))

# correction du type de variable (à priori important pour regression logistique : importance de mettre tout en facteur)
data_cancer1 %>%
  dplyr::mutate(
    id_intervention = as.character(id_intervention),
    id_patient = as.character(id_patient),
    categorie_age_adulte = as.factor(categorie_age_adulte),
    sexe = as.factor(sexe),
    categorie_imc_adulte = as.factor(categorie_imc_adulte),
    asa = as.factor(asa),
    urgence = as.factor(urgence),
    sexe = as.factor(sexe),
    lib_diagnostic = as.factor(lib_diagnostic),
    entree_urgences = as.factor(entree_urgences),
    rea_si_post_op = as.factor(rea_si_post_op),
    dobutamine = as.factor(dobutamine),
    ephedrine = as.factor(ephedrine),
    noradrenaline = as.factor(noradrenaline),
    phenylephrine = as.factor(phenylephrine),
    catecholamine = as.factor(catecholamine))

---------
## Caractérisation / représentation graphique pour représenter notre échantillon

summary(data_cancer1)

ggplot(data_cancer1, aes(y = age)) +
  geom_boxplot()

ggplot(data_cancer1, aes(y = poids)) +
  geom_boxplot()

ggplot(data_cancer1, aes(y = imc)) +
  geom_boxplot()
# Recherche de facteurs associés à réanimation ou durée de séjour de séjour plus longue dans cancer

## Test de variables qualitatives associés à rea_post_op

ggplot (data_cancer1, aes(x = sexe, fill = rea_si_post_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$sexe, data_cancer1$rea_si_post_op) # Bon test ??
chisq.test(tbl)

ggplot (data_cancer1, aes(x = categorie_age_adulte, fill = rea_si_post_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$categorie_age_adulte, data_cancer1$rea_si_post_op) # Bon test ??
chisq.test(tbl)

ggplot (data_cancer1, aes(x = categorie_imc_adulte, fill = rea_si_post_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$categorie_imc_adulte, data_cancer1$rea_si_post_op)
chisq.test(tbl)

ggplot (data_cancer1, aes(x = asa, fill = rea_post_si_op)) +
  geom_bar (position = "fill")
tbl = table(data_cancer1$asa, data_cancer1$rea_si_post_op)
chisq.test(tbl)


## Test correlation entre variables qualitatives et duree_sejour_interv

ggplot(data_cancer1, aes(x = age, y = duree_sejour_interv)) +
  geom_point()
cor.test(data_cancer1$age, data_cancer1$duree_bloc, method = "spearman", alternative= "less")

ggplot(data_cancer1, aes(x = imc, y = duree_sejour_interv)) +
  geom_point()
cor.test(data_cancer1$age, data_cancer1$duree_sejour_interv, method = "spearman", alternative= "less")


#Regression logistique (seulement pour predire mais pas pour expliquer le lien entre les variables => test chi2)
#on supprime les lignes avec des NA 

sum(is.na(data_cancer1$rea_si_post_op))
sum(is.na(data_cancer1$imc))
sum(is.na(data_cancer1$sexe))

data_cancer_na = data_cancer1%>%
  na.omit()

table(data_cancer_na$rea_post_op) # Nombre de patients avec et sans rea_post_op dans l'échantillon data_cancer_na

-----------
#creation du modele : regression logistique multiple
library(MASS)
modele1 = glm(formula=data_cancer_na$rea_si_post_op ~ data_cancer_na$age + 
                data_cancer_na$imc + data_cancer_na$asa+ data_cancer_na$sexe+ data_cancer_na$urgence+ 
                data_cancer_na$delai_entree_interv+data_cancer_na$categorie_imc_adulte, family = "binomial", na.action = na.omit)
?family.glm
summary(model1)
#AIC = 59940
modele1$formula
modele2 = step(modele1)
summary(modele2)
#AIC = 3774.4

# step() choisi : age, scoreasa, urgence1, duree_bloc, total_remplissage, dobutamine1, ephedrine1, nora ...
library("questionr")
odds.ratio(modele2)

#scoreasa, urgence, dobutamine, noradrenaline >>> 1 : facteur de risque d'entrée en réa_post_op 
#sexeM < 1 : facteur de protection ??? (pas sûr)
#duree_bloc, age, total_remplissage ~= 1 : pas d'impact sur l'entrée en réa 

#forestplot 
library(broom)
graphfor <- tidy(modele2, conf.int = TRUE, exponentiate = TRUE)
str(graphfor)
library(ggplot2)
ggplot(graphfor) +
  aes(x = estimate, y = term, xmin = conf.low, xmax = conf.high) +
  geom_vline(xintercept = 1) +
  geom_errorbarh() +
  geom_point() +
  scale_x_log10()

####################
pi_hat = predict(modele2, newdata = data_cancer_na,
             type = "response")

boxplot(pi~data_cancer_na$rea_post_op, y)
summary(data_cancer_na$sexe)
summary(data_cancer_na$rea_post_op)
#  F     M 
#8211 12640
length(data_cancer_na$rea_post_op)
length(y)
summary(data_cancer_na$asa)     #supprimer asa 4 et 5?
# ASA1  ASA2  ASA3  ASA4  ASA5 
# 4029 11044  5480   293     5 
