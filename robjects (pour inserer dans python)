# install.packages("dplyr") # pour manipulation des données
library(dplyr)

# install.packages("tidyr") # pour ordonner, ranger les données
library(tidyr)

library(MASS)

# Importation du fichier data_cancer
path = "/Users/karimbelarbi/Google_Drive/M1_Data_Science_en_Santé/Djamel Zitouni/Projet rpy2/"
data_cancer = read.csv2(file.path(path, 'data_cancer_export.csv'), sep = ';', dec = ',', header = TRUE, encoding = 'latin1')
str(data_cancer)

# Correction du type de variables
data_cancer$ID_INTERVENTION = as.character(data_cancer$ID_INTERVENTION)
data_cancer$ID_PATIENT = as.character(data_cancer$ID_PATIENT)
data_cancer$AGE = as.numeric(data_cancer$AGE)
data_cancer$CATEGORIE_AGE_ADULTE = as.factor(data_cancer$CATEGORIE_AGE_ADULTE)
data_cancer$POIDS = as.integer(data_cancer$POIDS)
data_cancer$IMC = as.integer(data_cancer$IMC)
data_cancer$CATEGORIE_IMC_ADULTE = as.factor(data_cancer$CATEGORIE_IMC_ADULTE)
data_cancer$CATEGORIE_ASA = as.factor(data_cancer$CATEGORIE_ASA)
data_cancer$URGENCE = as.factor(data_cancer$URGENCE)
data_cancer$SEXE = as.factor(data_cancer$SEXE)
data_cancer$DUREE_INTERVENTION = as.integer(data_cancer$DUREE_INTERVENTION)
data_cancer$DUREE_BLOC = as.integer(data_cancer$DUREE_BLOC)
data_cancer$DUREE_ANESTHESIE = as.integer(as.integer(data_cancer$DUREE_ANESTHESIE))
data_cancer$DUREE_INDUCTION_INCISION = as.integer(data_cancer$DUREE_INDUCTION_INCISION)
data_cancer$LIB_DIAGNOSTIC = as.factor(data_cancer$LIB_DIAGNOSTIC)
data_cancer$ENTREE_URGENCES = as.factor(data_cancer$ENTREE_URGENCES)
data_cancer$DUREE_SEJOUR_INTERV = as.integer(data_cancer$DUREE_SEJOUR_INTERV)
data_cancer$DELAI_ENTREE_INTERV = as.integer(data_cancer$DELAI_ENTREE_INTERV)
data_cancer$DECES_SEJOUR_INTERV = as.factor(data_cancer$DECES_SEJOUR_INTERV)
data_cancer$REA_SI_POST_OP = as.factor(data_cancer$REA_SI_POST_OP)
data_cancer$MOY_PNIM_BLOC_INDUC = as.numeric(data_cancer$MOY_PNIM_BLOC_INDUC)
data_cancer$MOY_PNIM_ANESTH = as.numeric(data_cancer$MOY_PNIM_ANESTH)
data_cancer$MOY_VCE_CHIR_POIDS_IDEAL  = as.numeric(data_cancer$MOY_VCE_CHIR_POIDS_IDEAL)
data_cancer$TOTAL_REMPLISSAGE = as.numeric(data_cancer$TOTAL_REMPLISSAGE)
data_cancer$CATECHOLAMINE = as.factor(data_cancer$CATECHOLAMINE)


str(data_cancer) # 11401 obs. of  30 variables:

# Boucle pour faire toutes les stats descriptives

resultat = data.frame()
nom_variable = vector()
classe_variable = vector()
nom_test = vector()
p_value = vector()

for (i in names(data_cancer)) { 
    if (class(data_cancer[,i]) == "integer"|class(data_cancer[,i]) == "numeric") {
      test = wilcox.test(data_cancer[,i] ~ data_cancer$REA_SI_POST_OP, paired = FALSE, alternative = "two.sided", na.action = na.omit)
      nom_variable[i] = as.character(i)
      classe_variable[i] = class(data_cancer[,i])
      nom_test[i] = "wilcox.test"
      p_value[i] = test$p.value   }
    else if (class(data_cancer[,i]) == "factor") {  
      tableau = table(data_cancer[,i], data_cancer[, "REA_SI_POST_OP"], useNA = "no" )
      test = chisq.test(tableau, )
      nom_variable[i] = as.character(i)
      classe_variable[i] = class(data_cancer[,i])
      nom_test[i] = "chisq.test"
      p_value[i] = test$p.value 
}
}
resultat = data.frame(nom_variable, classe_variable, nom_test, p_value)

resultat
View(resultat)

# Histogramme pour la description de notre population d'intérêt : âge, IMC, catégorie ASA, admission en urgence, mortalité, admission en réanimation. 
  ggplot(data) +
  aes(x = AGE) +
  geom_histogram(bins = 50L, fill = "#bdbdbd") +
  labs(x = "âge (en années)", y = "Effectifs", title = "Distribution en fonction de l'âge") +
  theme_linedraw()

ggplot(data) +
  aes(x = IMC) +
  geom_histogram(bins = 50L, fill = "#bdbdbd") +
  labs(x = "Indice de masse corporel (IMC)", y = "Effectifs", title = "Distribution en fonction de l'IMC") +
  theme_linedraw() +
  xlim(10L, 50L)

data %>%
  filter(!is.na(CATEGORIE_ASA))
  ggplot() +
  aes(x = CATEGORIE_ASA) +
  geom_bar(fill = "#bdbdbd") +
  labs(x = "Score ASA", y = "Effectifs", title = "Score ASA") +
  theme_linedraw()

ggplot(data) +
  aes(x = URGENCE) +
  geom_bar(fill = "#bdbdbd") +
  labs(x = "Admission en urgence", y = "Effectifs", title = "Admission en urgence") +
  theme_linedraw()

ggplot(data) +
  aes(x = REA_SI_POST_OP) +
  geom_bar(fill = "#bdbdbd") +
  labs(x = "Hospitalisation en réanimation", y = "Effectifs", title = "Admission en réanimation") +
  theme_linedraw()
  
###########################
############################

#################
# Regression logistique pour expliquer le besoin de réanimation en fonctions de variables pré-op : approche avec rpy2 / glm (R)

# Importation du fichier data_cancer
path = "/Users/karimbelarbi/Google_Drive/M1_Data_Science_en_Santé/Djamel Zitouni/Projet rpy2/"
data_cancer = read.csv2(file.path(path, 'data_cancer_export.csv'), sep = ';', dec = ',', header = TRUE, encoding = 'latin1', na.strings = c('', 'NA'))
str(data_cancer)

# Correction du type de variables
data_cancer$ID_INTERVENTION = as.character(data_cancer$ID_INTERVENTION)
data_cancer$ID_PATIENT = as.character(data_cancer$ID_PATIENT)
data_cancer$AGE = as.numeric(data_cancer$AGE)
data_cancer$CATEGORIE_AGE_ADULTE = as.factor(data_cancer$CATEGORIE_AGE_ADULTE)
data_cancer$POIDS = as.integer(data_cancer$POIDS)
data_cancer$IMC = as.integer(data_cancer$IMC)
data_cancer$CATEGORIE_IMC_ADULTE = as.factor(data_cancer$CATEGORIE_IMC_ADULTE)
data_cancer$CATEGORIE_ASA = as.factor(data_cancer$CATEGORIE_ASA)
data_cancer$URGENCE = as.factor(data_cancer$URGENCE)
data_cancer$SEXE = as.factor(data_cancer$SEXE)
data_cancer$DUREE_INTERVENTION = as.integer(data_cancer$DUREE_INTERVENTION)
data_cancer$DUREE_BLOC = as.integer(data_cancer$DUREE_BLOC)
data_cancer$DUREE_ANESTHESIE = as.integer(as.integer(data_cancer$DUREE_ANESTHESIE))
data_cancer$DUREE_INDUCTION_INCISION = as.integer(data_cancer$DUREE_INDUCTION_INCISION)
data_cancer$LIB_DIAGNOSTIC = as.factor(data_cancer$LIB_DIAGNOSTIC)
data_cancer$ENTREE_URGENCES = as.factor(data_cancer$ENTREE_URGENCES)
data_cancer$DUREE_SEJOUR_INTERV = as.integer(data_cancer$DUREE_SEJOUR_INTERV)
data_cancer$DELAI_ENTREE_INTERV = as.integer(data_cancer$DELAI_ENTREE_INTERV)
data_cancer$DECES_SEJOUR_INTERV = as.factor(data_cancer$DECES_SEJOUR_INTERV)
data_cancer$REA_SI_POST_OP = as.factor(data_cancer$REA_SI_POST_OP)
data_cancer$MOY_PNIM_BLOC_INDUC = as.numeric(data_cancer$MOY_PNIM_BLOC_INDUC)
data_cancer$MOY_PNIM_ANESTH = as.numeric(data_cancer$MOY_PNIM_ANESTH)
data_cancer$MOY_VCE_CHIR_POIDS_IDEAL  = as.numeric(data_cancer$MOY_VCE_CHIR_POIDS_IDEAL)
data_cancer$TOTAL_REMPLISSAGE = as.numeric(data_cancer$TOTAL_REMPLISSAGE)
data_cancer$CATECHOLAMINE = as.factor(data_cancer$CATECHOLAMINE)

# Creation dataframe avec variables susceptibles d'expliquer la réanimation 
data_cancer_glm = data_cancer[, c('AGE', 'IMC','SEXE', 'URGENCE', 'DELAI_ENTREE_INTERV', 'CATEGORIE_IMC_ADULTE','CATEGORIE_ASA','REA_SI_POST_OP')]

# Elimination des valeurs manquantes

data_cancer_glm = na.omit(data_cancer_glm)

str(data_cancer_glm) # vérification du type de variables

# Premier modèle en regression logistique

modele1 = glm(REA_SI_POST_OP~., family = "binomial", na.action = na.omit, data = data_cancer_glm)


summary(modele1) # AIC : 29922

# Selection automatique des variables (STEP)
modele2 =step(modele1, direction = 'both', trace = TRUE)
summary(modele2)# AIC : 29919
modele2$formula# Choisi AGE + IMC + SEXE + URGENCE + DELAI_ENTREE_INTERV + CATEGORIE_ASA

round(exp(cbind(OR=coef(modele2), confint(modele2))), digits=3)

# calcul du y prédit (réanimation ou non) suivant notre modèle
pi_hat = predict(object = modele2, newdata = data_cancer_glm, type = "response") # l’option type="response" de la commande predict permet de calculer πˆ (pi chapeau = pi_hat)
pi_hat

# Pour voir la distribution des y prédits (probabilité prédite de réanimation) en fonction du y réel (réanimation ou non, en vrai)

boxplot(pi_hat ~ data_cancer_glm$REA_SI_POST_OP)
boxplot(pi_hat ~ data_cancer_glm$REA_SI_POST_OP) # Le y prédit est plus grand pour les enregistrements ayant vraiment necessité une réanimation.

# Tracer la courbe ROC en utilisant le package ROCR
# install.packages('ROCR')
library(ROCR)

# prediction de la classe d'affectation pour differents seuils grace à fonction prediction du package ROCR
prediction_y = prediction(pi_hat[which(!is.na(pi_hat))], data_cancer_glm$REA_SI_POST_OP[which(!is.na(pi_hat))])

# Tracé de la courbe ROC
perf = performance(prediction_y, "tpr", "fpr")  # tpr pour "true positive rate" et fpr pour "false positive rate"
plot(perf)# plot de la courbe ROC  taux de vrais positif  versus faux positifs
abline (a=0, b=1)

# Recupération de l'aire sous la courbe  de la courbe ROC
auc = performance(prediction_y, 'auc')
auc@y.values# AUC de 0,632

# Visualisation des odds-ratios
# install.packages("sjPlot")
library(sjPlot)
plot_model(modele2, sort.est = TRUE , rm.terms = "SEXE [I]", title = "Admission en réanimation", axis.title = "Odds-ratio (95% CI)")

data(mtcars)
m <- glm(mpg ~ wt + am + cyl + gear, data = mtcars)
plot_model(m)




