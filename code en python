#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  9 16:14:50 2020

@author: karimbelarbi
"""
# Définition du répertoire de travail
import os
os.getcwd()
os.chdir("/Users/karimbelarbi/Google_Drive/M1_Data_Science_en_Santé/Djamel Zitouni/Projet rpy2")

# Installation de rpy2 et de panda
pip install rpy2
import rpy2
from rpy2 import robjects
from rpy2.robjects.packages import importr # permettra d'importer la librairie

import numpy

# %matplotlib inline # pour ggplot2
pip install plotnine
import plotnine 

pip install pandas
import pandas

# importr("MASS")


# Chargement du fichier
data = robjects.DataFrame.from_csvfile("export_data_1.csv", header = True, sep = ";", dec = ",")

# importation données en utilisant panda
data_pd = pandas.read_csv("export_data_1.csv", delimiter = ";", decimal = ",", encoding = "latin-1")
data_pd.head

# Première exploration du fichier data

data.nrow
data.ncol
data_pd.shape # pour voir dimension 299466 x 130
print(robjects.r.str(data))

# [column.rclass[0] for column in data]

print(data.colnames)
#print(data.rx(1, True))
# print(robjects.r.str(data))
# print(robjects.r.str(df))
#x = data.rx(10, True)
# print(x.rx2('POIDS_IDEAL')[0])
# robjects.r.mean(data[2])
# robjects.r.sd(data[2])
# rows_i = robjects.IntVector(range(1,5))
# subdata = data.rx(rows_i, True)
# print(subdata.nrow)

# subdata.to_csvfile(path = "export_data20.Csv", quote = True, sep = ";", eol='\n', na = 'NA', dec = ',', row_names = RTrue, qmethod = 'escape'', append = False')
# Enregistrement d'un sous fichier


# Extraction des interventions liées à des chirurgies carcinologiques

print(data_pd["LIB_DIAGNOSTIC"])
data_cancer = data_pd[data_pd['LIB_DIAGNOSTIC'].str.contains('cancer|tumeur|carcinome', case = False, na= False)]
    
set(data_cancer["LIB_DIAGNOSTIC"]) # pour vérifier les lib_diagnostics selectionnés
len(set(data_cancer["LIB_DIAGNOSTIC"])) # un total de 679 lib_diagnostics différents.

data_cancer.shape # pour avoir les dimensions 32232 x 130
list(data_cancer) # pour avoir les noms de colonnes

# Selection des variables d'interet pour l'étude

data_cancer = data_cancer[['ID_INTERVENTION', 'ID_PATIENT', 'AGE', 'CATEGORIE_AGE_ADULTE', 'POIDS', 'IMC', 'CATEGORIE_IMC_ADULTE', 'CATEGORIE_ASA', 'URGENCE', 'SEXE', 'DUREE_INTERVENTION',
                           'DUREE_BLOC', 'DUREE_ANESTHESIE', 'DUREE_INDUCTION_INCISION', 'LIB_DIAGNOSTIC', 'ENTREE_URGENCES', 'DUREE_SEJOUR_INTERV', 'DELAI_ENTREE_INTERV', 'DECES_SEJOUR_INTERV','REA_SI_POST_OP',  
                            'MOY_PNIM_BLOC_INDUC', 'MOY_PNIM_ANESTH', 'DOBUTAMINE',  'EPHEDRINE', 'NORADRENALINE', 'PHENYLEPHRINE', 'MOY_VCE_CHIR_POIDS_IDEAL', 'TOTAL_REMPLISSAGE']]

data_cancer.shape # pour avoir les dimensions 32232 x 28
list(data_cancer) # pour avoir les noms de colonnes 

# Correction des types de variables

# data_cancer = data_cancer.dropna() # Elimine toutes les interventions avec un NA n'importe ou. On perd trop de lignes
data_cancer = data_cancer.fillna(-1) # on remplie les champs NA par -1

data_cancer.columns # Affichage des variables
data_cancer.dtypes # Affichage des types de variables

convert_dict = {'ID_INTERVENTION': str, # création d'un dictionnaire attribuant à chaque colonne un type de valeurs
                'ID_PATIENT': str,
                'AGE': int,
                'CATEGORIE_AGE_ADULTE' : str,
                'POIDS': int,
                'IMC': float,
                'CATEGORIE_IMC_ADULTE': str,
                'CATEGORIE_ASA': str,
                'URGENCE': bool,
                'SEXE': str,
                'DUREE_INTERVENTION': int,
                'DUREE_BLOC': int,
                'DUREE_ANESTHESIE': int,
                'DUREE_INDUCTION_INCISION' : int,
                'LIB_DIAGNOSTIC' : str,
                'ENTREE_URGENCES': bool,
                'DUREE_SEJOUR_INTERV': int,
                'DELAI_ENTREE_INTERV': int,
                'DECES_SEJOUR_INTERV': bool,
                'REA_SI_POST_OP': bool,
                'MOY_PNIM_BLOC_INDUC' : float,
                'MOY_PNIM_ANESTH': float,
                'DOBUTAMINE' : bool,
                'EPHEDRINE': bool,
                'NORADRENALINE': bool,
                'PHENYLEPHRINE': bool,
                'MOY_VCE_CHIR_POIDS_IDEAL': float,
                'TOTAL_REMPLISSAGE': int
               } 
    
data_cancer = data_cancer.astype(convert_dict) 

data_cancer = data_cancer.replace('-1', 'NA') # On remets les -1 en NA
print(data_cancer.dtypes) 
data_cancer.shape # on a toujours dimensions 32232 x 28

pandas.unique(data_cancer['CATEGORIE_ASA'])

# Traitement des valeurs aberrantes

max(data_cancer['POIDS'])
min(data_cancer['POIDS'])

data_cancer.loc[data_cancer['POIDS'] < 0, 'POIDS'] = numpy.nan
data_cancer.loc[data_cancer['POIDS'] > 250, 'POIDS'] = numpy.nan

data_cancer.loc[data_cancer['IMC'] < 5, 'IMC'] = numpy.nan
data_cancer.loc[data_cancer['IMC'] > 75, 'IMC'] = numpy.nan

data_cancer.loc[data_cancer['DELAI_ENTREE_INTERV'] < 0, 'DELAI_ENTREE_INTERV'] = numpy.nan
data_cancer.loc[data_cancer['DELAI_ENTREE_INTERV'] > 60, 'DELAI_ENTREE_INTERV'] = numpy.nan

data_cancer.loc[data_cancer['DUREE_INTERVENTION'] < 15, 'DUREE_INTERVENTION'] = numpy.nan
data_cancer.loc[data_cancer['DUREE_INTERVENTION'] > 1440, 'DUREE_INTERVENTION'] = numpy.nan

data_cancer.loc[ data_cancer['DUREE_BLOC'] < 15, 'DUREE_BLOC'] = numpy.nan
data_cancer.loc[ data_cancer['DUREE_BLOC'] > 1440, 'DUREE_BLOC'] = numpy.nan

data_cancer.loc[data_cancer['DUREE_ANESTHESIE'] < 0, 'DUREE_ANESTHESIE'] = numpy.nan
data_cancer.loc[data_cancer['DUREE_ANESTHESIE'] > 1440, 'DUREE_ANESTHESIE'] = numpy.nan

data_cancer.loc[ data_cancer['DUREE_INDUCTION_INCISION'] < 0, 'DUREE_INDUCTION_INCISION'] = numpy.nan

data_cancer.loc[ data_cancer['MOY_VCE_CHIR_POIDS_IDEAL'] < 0, 'MOY_VCE_CHIR_POIDS_IDEAL'] = numpy.nan

max(data_cancer['POIDS'])
min(data_cancer['POIDS'])


# Ajout de nouvelles variables

data_cancer['CATHECOLAMINE'] = (data_cancer['DOBUTAMINE'] == 1) | (data_cancer['EPHEDRINE'] == 1) | (data_cancer['NORADRENALINE'] == 1) | (data_cancer['PHENYLEPHRINE'] == 1)
# pandas.unique(data_cancer['CATHECOLAMINE'])

## Vérification de la nouvelle variable "CATHECOLAMINE"
data_cancer[['DOBUTAMINE', 'EPHEDRINE', 'NORADRENALINE', 'PHENYLEPHRINE', 'CATHECOLAMINE']].head(50)

## Elimination des colonnes 'DOBUTAMINE', 'EPHEDRINE', 'NORADRENALINE', 'PHENYLEPHRINE'
data_cancer = data_cancer.drop(['DOBUTAMINE',  'EPHEDRINE', 'NORADRENALINE', 'PHENYLEPHRINE'], 1) # 1 pour colonnes


# Data visualization
# from plotnine import *

data_cancer = data_cancer.replace('NA', numpy.nan)

# Pour faire tous les graphs de variables en fonction de rea_si_post_op
for i in data_cancer.drop(['ID_INTERVENTION', 'ID_PATIENT'], axis = 1).columns: # nom des colonnes à l'exlusion de ID_INTERVENTION et ID_PATIENT
    data_cancer = data_cancer[data_cancer[i].notna()] # on retire les enregistrements avec valeurs manquante pour la variable d'intéret
    if data_cancer[i].dtypes == int or data_cancer[i].dtypes == float:
        (plotnine.ggplot(data=data_cancer, # utilisation du dataset data_cancer
           mapping=plotnine.aes(x='REA_SI_POST_OP', y = i)) # definition de la variable à représenter en y
             + plotnine.geom_boxplot(na_rm=True)
             + plotnine.xlab("hospitalisation en réanimation")
             + plotnine.ylab(str(i.lower()))
             + plotnine.theme_538()).save(filename=i)
    elif data_cancer[i].dtypes == str or data_cancer[i].dtypes == bool:
        (plotnine.ggplot(data=data_cancer, # utilisation du dataset data_cancer
           mapping=plotnine.aes(x='REA_SI_POST_OP', fill = i)) # definition de la variable à représenter en y
             + plotnine.geom_bar(position = "fill", na_rm=True)
             + plotnine.xlab("hospitalisation en réanimation")
             + plotnine.ylab(str(i.lower()))
             + plotnine.theme_538()).save(filename=i)

# Pour faire analyses statistiques de variables en fonction de rea_si_post_op dans R

# Export de data_cancer sous forme de csv 
data_cancer.to_csv('data_cancer_export.csv', sep = ';', decimal = ',', header = True, encoding = 'latin-1')  # exportation du fichier en format csv

# Importation de data_cancer dans R via rpy2
robjects.r("path = '/Users/karimbelarbi/Google_Drive/M1_Data_Science_en_Santé/Djamel Zitouni/Projet rpy2/'")
robjects.r("read.csv2(file.path(path, 'data_cancer_export.csv'), sep = ';', dec = ',', header = TRUE, encoding = 'latin1')")

# Correction des types de variables
robjects.r("""data_cancer$ID_INTERVENTION = as.character(data_cancer$ID_INTERVENTION)
data_cancer$ID_PATIENT = as.character(data_cancer$ID_PATIENT)
data_cancer$AGE = as.numeric(data_cancer$AGE)
data_cancer$CATEGORIE_AGE_ADULTE = as.factor(data_cancer$CATEGORIE_AGE_ADULTE)
data_cancer$POIDS = as.integer(data_cancer$POIDS)
data_cancer$IMC = as.integer(data_cancer$IMC)
data_cancer$CATEGORIE_IMC_ADULTE = as.factor(data_cancer$CATEGORIE_IMC_ADULTE)
data_cancer$CATEGORIE_ASA = as.factor(data_cancer$CATEGORIE_ASA)
data_cancer$URGENCE = as.factor(data_cancer$URGENCE)
data_cancer$SEXE = as.character(data_cancer$SEXE)
data_cancer$DUREE_INTERVENTION = as.integer(data_cancer$DUREE_INTERVENTION)
data_cancer$DUREE_BLOC = as.integer(data_cancer$DUREE_BLOC)
data_cancer$DUREE_ANESTHESIE = as.integer(as.integer(data_cancer$DUREE_ANESTHESIE))
data_cancer$DUREE_INDUCTION_INCISION = as.integer(data_cancer$DUREE_INDUCTION_INCISION)
data_cancer$LIB_DIAGNOSTIC = as.factor(data_cancer$LIB_DIAGNOSTIC)
data_cancer$ENTREE_URGENCES = as.factor(data_cancer$ENTREE_URGENCES)
data_cancer$DUREE_SEJOUR_INTERV = as.integer(data_cancer$DUREE_SEJOUR_INTERV)
data_cancer$DELAI_ENTREE_INTERV = as.integer(data_cancer$DELAI_ENTREE_INTERV)
data_cancer$DECES_SEJOUR_INTERV = as.factor(data_cancer$DECES_SEJOUR_INTERV)
data_cancer$REA_SI_POST_OP = as.factor(data_cancer$REA_SI_POST_OP)
data_cancer$MOY_PNIM_BLOC_INDUC = as.numeric(data_cancer$MOY_PNIM_BLOC_INDUC)
data_cancer$MOY_PNIM_ANESTH = as.numeric(data_cancer$MOY_PNIM_ANESTH)
data_cancer$MOY_VCE_CHIR_POIDS_IDEAL  = as.numeric(data_cancer$MOY_VCE_CHIR_POIDS_IDEAL)
data_cancer$TOTAL_REMPLISSAGE = as.numeric(data_cancer$TOTAL_REMPLISSAGE)
data_cancer$CATHECOLAMINE = as.factor(data_cancer$CATHECOLAMINE)""")

robjects.r("str(data_cancer)")
# Creation de deux dataframe en fonction de passage ou non en réanimation
robjects.r("data_cancer_rea = subset(data_cancer,  REA_SI_POST_OP == 'True')")
robjects.r("data_cancer_nonrea = subset(data_cancer,  REA_SI_POST_OP == 'False')")
       
# Analyse statistique
# Test Chi2 d'homogénéité
# HO = hypothèse de distribution identique de la variable entre groupes REA_SI_POST_OP ou non REA_SI_POST_OP
# H1 = distribution différente de la variable  entre groupes REA_SI_POST_OP ou non REA_SI_POST_OP
